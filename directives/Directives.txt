1. AngularJS lets you extend HTML with new attributes called Directives.

AngularJS has a set of built-in directives which offers functionality to your applications and AngularJS also lets you define your own directives(Custom Directives)

2. The general idea behind directives is this: what if you could create your own element and attribute types with corresponding functionality? With directives, you can create custom, reusable components for your application that make developing interactive UI widgets drastically easier. No more custom jQuery code every time you want put a UI widget on the screen; you just place your custom directives there instead!


3. At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS's HTML compiler ($compile) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children. 

4. Most of the directives in AngularJS are starting with ng- where ng stands for Angular. AngularJS includes various built-in directives

a. ng-app: Auto bootstrap AngularJS application. The ng-app directive initializes AngularJS and makes the specified element a root element of the application. Visit ng-app section for more information.

b. ng-init: Initializes AngularJS variables(like:  that initializes variable of string, number, array, and object.)

Ex: <!DOCTYPE html>
<html >
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js"></script>
</head>
<body >
    <div ng-app ng-init="greet='Hello World!'; amount= 100; myArr = [100, 200]; person = { firstName:'Steve', lastName :'Jobs'}">
        {{amount}}      <br />
        {{myArr[1]}}    <br />
        {{person.firstName}}
    </div>
</body>
</html>


c. ng-model: Binds HTML control's value to a property on the $scope object. The ng-model directive is used for two-way data binding in AngularJS. It binds <input>, <select> or <textarea> elements to a specified property on the $scope object. So, the value of the element will be the value of a property and vica-versa.

d. ng-controller: Attaches the controller of MVC to the view.

Ex: 
<!DOCTYPE html>
<html >
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js"></script>
</head>
<body ng-app>
    <input type="text" ng-model="name" />
    <div>
       Hello {{name}}
    </div>
</body>
</html>

Note: The property set via ng-model can be accessed in a controller using $scope object. We will look at it in the next section.
Variables initialized in ng-init are different from the properties defined using ng-model directive. The variables initialized in ng-init are not attached to $scope object whereas ng-model properties are attached to $scope object.




e. ng-bind: Replaces the value of HTML control with the value of specified AngularJS expression. The ng-bind directive binds the model property declared via $scope or ng-model directive or the result of an expression to the HTML element. It also updates an element if the value of an expression changes.

Ex:

<!DOCTYPE html>
<html >
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js"></script>
</head>
<body ng-app="">
    <div>
        5 + 5 = <span ng-bind="5 + 5"></span> <br />

        Enter your name: <input type="text" ng-model="name" /><br />
        Hello <span ng-bind="name"></span>
    </div>
</body>
</html>


f. ng-repeat: Repeats HTML template once per each item in the specified collection(array collection). 

Ex:

<!DOCTYPE html>
<html>
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js"></script>
    <style>
        div {
            border: 1px solid green;
            width: 100%;
            height: 50px;
            display: block;
            margin-bottom: 10px;
            text-align:center;
            background-color:yellow;
        }
    </style>
</head>
<body ng-app="" ng-init="students=['Bill','Steve','Ram']">
    <ol>
        <li ng-repeat="name in students">
            {{name}}
        </li>
    </ol>
    <div ng-repeat="name in students">
        {{name}}
    </div>
</body>
</html>


g. ng-show: Display HTML element based on the value of the specified expression.


h. ng-readonly: Makes HTML element read-only based on the value of the specified expression. The ng-readonly directive makes an HTML element read-only, based on the Boolean value returned from the specified expression. If an expression returns true then the element will become read-only, otherwise not.


i. ng-disabled: Sets the disable attribute on the HTML element if specified expression evaluates to true. The ng-disabled directive disables an HTML element, based on the Boolean value returned from the specified expression. If an expression returns true the element will be disabled, otherwise not.


j. ng-if: Removes or recreates HTML element based on an expression. The ng-if directive creates or removes an HTML element based on the Boolean value returned from the specified expression. If an expression returns true then it recreates an element otherwise removes an element from the HTML document.


Ex:

<!DOCTYPE html>
<html>
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js"></script>
    <style>
        div {
            width: 100%;
            height: 50px;
            display: block;
            margin: 15px 0 0 10px;
        }
    </style>
</head>
<body ng-app ng-init="checked=true" >
    Click Me: <input type="checkbox" ng-model="checked" /> <br />
    <div>
        New: <input ng-if="checked" type="text" />
    </div>
    <div>
        Read-only: <input ng-readonly="checked" type="text" value="This is read-only." />
    </div>
    <div>
        Disabled: <input ng-disabled="checked" type="text" value="This is disabled." />
    </div>
</body>
</html>



k. ng-click: Specifies custom behavior when an element is clicked.



5. Custom Directives: Custom directives are used in AngularJS to extend the functionality of HTML. Custom directives are defined using "directive" function. A custom directive simply replaces the element for which it is activated. AngularJS application during bootstrap finds the matching elements and do one time activity using its compile() method of the custom directive then process the element using link() method of the custom directive based on the scope of the directive.

AngularJS provides support to create custom directives for following type of elements.

a. Element directives - Directive activates when a matching element is encountered.

b. Attribute - Directive activates when a matching attribute is encountered.

c. CSS - Directive activates when a matching css style is encountered.

d. Comment - Directive activates when a matching comment is encountered.


Ex:

<html>
   
   <head>
      <title>Angular JS Custom Directives</title>
   </head>
   
   <body>
      <h2>AngularJS Sample Application</h2>
      
      <div ng-app = "mainApp" ng-controller = "StudentController">
         <student name = "Mahesh"></student><br/>
         <student name = "Piyush"></student>
      </div>
		
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      
      <script>
         var mainApp = angular.module("mainApp", []);
         <!-- 
		 //Create a directive, first parameter is the html element to be attached.	  
//We are attaching student html tag. 
//This directive will be activated as soon as any student element is encountered in html
-->
         mainApp.directive('student', function() {
		 //define the directive object
            var directive = {};
			//restrict = E, signifies that directive is Element directive
            directive.restrict = 'E';
			//template replaces the complete element with its text. 
            directive.template = "Student: <b>{{student.name}}</b> , Roll No: <b>{{student.rollno}}</b>";
            //scope is used to distinguish each student element based on criteria.
            directive.scope = {
               student : "=name"
            }
            
			//compile is called during application initialization. AngularJS calls it once when html page is loaded.

			
            directive.compile = function(element, attributes) {
               element.css("border", "1px solid #cccccc");
               
			   //linkFunction is linked with each element with scope to get the element specific data.
     
               var linkFunction = function($scope, element, attributes) {
                  element.html("Student: <b>"+$scope.student.name +"</b> , Roll No: <b>"+$scope.student.rollno+"</b><br/>");
                  element.css("background-color", "#ff00ff");
               }
               return linkFunction;
            }
            
            return directive;
         });
         
		 //Define controller to update the scope for directive
         mainApp.controller('StudentController', function($scope) {
            $scope.Mahesh = {};
            $scope.Mahesh.name = "Mahesh Parashar";
            $scope.Mahesh.rollno  = 1;

            $scope.Piyush = {};
            $scope.Piyush.name = "Piyush Parashar";
            $scope.Piyush.rollno  = 2;
         });
			
      </script>
      
   </body>
</html>

